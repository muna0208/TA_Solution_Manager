<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.daumsoft.taSolutionManager.restFullApi.mapper.CommonUserRestMapper">
	  
   	<select id="getUserList" resultType="user">
		/* integrationUserSql.getUserList */
		SELECT
		    *
		    , COALESCE(to_char(last_access_date, 'YYYY-MM-DD HH24:MI:SS'), '-') AS "lastAccessDate"
		    , COALESCE(to_char(update_date, 'YYYY-MM-DD HH24:MI:SS'), '') AS "updateDate"
		    , to_char(register_date, 'YYYY-MM-DD HH24:MI:SS') AS "registerDate"
		FROM "USER"
        ORDER BY id DESC
	</select>
	
	<select id="getUser" resultType="user">
		/* integrationUserSql.getUser */
		SELECT 
		    *
		    , COALESCE(to_char(last_access_date, 'YYYY-MM-DD HH24:MI:SS'), '-') AS "lastAccessDate"
		    , COALESCE(to_char(update_date, 'YYYY-MM-DD HH24:MI:SS'), '') AS "updateDate"
		    , to_char(register_date, 'YYYY-MM-DD HH24:MI:SS') AS "registerDate"
		FROM "USER" 
		WHERE id = #{id} 
   </select>
	
   
	<select id="getUserInfo" parameterType="user" resultType="user">
		/* integrationUserSql.getUserInfo */
		SELECT 
		    *
		    , COALESCE(to_char(last_access_date, 'YYYY-MM-DD HH24:MI:SS'), '-') AS "lastAccessDate"
		    , COALESCE(to_char(update_date, 'YYYY-MM-DD HH24:MI:SS'), '') AS "updateDate"
		    , to_char(register_date, 'YYYY-MM-DD HH24:MI:SS') AS "registerDate"
		FROM 
			"USER" 
		WHERE 
			user_id = #{userId}
			AND user_pw = #{userPw}
			AND use_flag = true
   </select>


	<update id="updateLastAccessDate">
		/* integrationUserSql.updateLastAccessDate */
		UPDATE 
		   "USER"
		SET 
			last_access_date = NOW()
		WHERE 
			id = #{id}
   </update>


   <select id="duplicateCheckUserId" resultType="java.lang.Integer">
   		SELECT
		    count(*)
		FROM "USER"
   		WHERE user_id = #{userId}
   </select>


	<insert id="insertUser" parameterType="user" 
			useGeneratedKeys="true" keyColumn="id" keyProperty="id">
		/* integrationUserSql.insertUser */
		INSERT INTO 
			"USER"(
				user_id
				, user_name
				, email
				, user_pw
				, register_date
				, registerer
				, user_auth
				, use_flag
			) VALUES (
				#{userId}
				, #{userName}
				, #{email}
				, #{userPw}
				, NOW()
				, #{registerer}
				, #{userAuth}
				, #{useFlag}
			)
	</insert>
	
	
	<update id="updateUser" parameterType="user">
   		UPDATE "USER"
   			<trim prefix="SET" suffixOverrides=",">
				<if test='userName != null and userName != "null" and userAuth != ""' >user_name = #{userName},</if>
	   			<if test='email != null and email != "null" and email != ""' >email = #{email},</if>
	   			<if test='useFlag != null' >use_flag = #{useFlag},</if>
				<if test='userAuth != null and userAuth != "null" and userAuth != ""' >user_auth = #{userAuth},</if>
				<if test='userPw != null and userPw != "null" and userPw != ""' >user_pw = #{userPw},</if>
   			</trim>
		WHERE ID = #{id}
   </update>

   <delete id="deleteUser">
   		DELETE FROM "USER" WHERE ID = #{id}
   </delete>

   <select id="findUserId" parameterType="user" resultType="user">
   		SELECT * FROM "USER"
   		WHERE 1 = 1
   			<if test='userId != null and userId != "null" and userId != ""' >AND user_id = #{userId}</if>
   			<if test='userName != null and userName != "null" and userName != ""' >AND user_name = #{userName}</if>
   			<if test='email != null and email != "null" and email != ""' >AND email = #{email}</if>
   </select>

</mapper>